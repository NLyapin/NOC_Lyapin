package config

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/openconfig/gnmi/client"
	"github.com/openconfig/gnmi/proto/gnmi"
)

func AddInterface(name, ifaceType string, enabled bool) error {
	log.Printf("‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ %s...", name)

	update := &gnmi.SetRequest{
		Prefix: &gnmi.Path{Target: "router1"},
		Update: []*gnmi.Update{
			{
				Path: &gnmi.Path{Elem: []*gnmi.PathElem{{Name: "interfaces"}, {Name: "interface", Key: map[string]string{"name": name}}}},
				Val: &gnmi.TypedValue{Value: &gnmi.TypedValue_StringVal{
					StringVal: fmt.Sprintf(`{ "config": { "name": "%s", "type": "%s", "enabled": %t } }`, name, ifaceType, enabled),
				}},
			},
		},
	}

	return sendConfig(update)
}

func DeleteRoute(prefix string) error {
	log.Printf("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ %s...", prefix)

	delete := &gnmi.SetRequest{
		Prefix: &gnmi.Path{Target: "router1"},
		Delete: []*gnmi.Path{
			{Elem: []*gnmi.PathElem{
				{Name: "network-instances"},
				{Name: "network-instance", Key: map[string]string{"name": "default"}},
				{Name: "table-connections"},
				{Name: "static"},
				{Name: "routes"},
				{Name: "route", Key: map[string]string{"prefix": prefix}},
			}},
		},
	}

	return sendConfig(delete)
}

func sendConfig(req *gnmi.SetRequest) error {
	addr := "localhost:50051"
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	target := client.Destination{
		Addr:     addr,
		Target:   "router1",
		Encoding: gnmi.Encoding_JSON,
	}

	cli, err := client.New(ctx, client.Type("gnmi"), target)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer cli.Close()

	resp, err := cli.(*client.Impl).Set(ctx, req)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}

	log.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %v", resp)
	return nil
}

func AddRoute(prefix, nexthop string) error {
	log.Printf("üõ£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ %s —á–µ—Ä–µ–∑ %s...", prefix, nexthop)

	update := &gnmi.SetRequest{
		Prefix: &gnmi.Path{Target: "router1"},
		Update: []*gnmi.Update{
			{
				Path: &gnmi.Path{Elem: []*gnmi.PathElem{
					{Name: "network-instances"},
					{Name: "network-instance", Key: map[string]string{"name": "default"}},
					{Name: "table-connections"},
					{Name: "static"},
					{Name: "routes"},
					{Name: "route", Key: map[string]string{"prefix": prefix}},
				}},
				Val: &gnmi.TypedValue{Value: &gnmi.TypedValue_StringVal{
					StringVal: fmt.Sprintf(`{ "config": { "prefix": "%s", "nexthop": "%s" } }`, prefix, nexthop),
				}},
			},
		},
	}

	return sendConfig(update)
}

func DeleteInterface(name string) error {
	log.Printf("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ %s...", name)

	delete := &gnmi.SetRequest{
		Prefix: &gnmi.Path{Target: "router1"},
		Delete: []*gnmi.Path{
			{Elem: []*gnmi.PathElem{{Name: "interfaces"}, {Name: "interface", Key: map[string]string{"name": name}}}},
		},
	}

	return sendConfig(delete)
}

func SetIPAddress(interfaceName, ipAddress string) error {
	log.Printf("üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ IP %s –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ %s...", ipAddress, interfaceName)

	update := &gnmi.SetRequest{
		Prefix: &gnmi.Path{Target: "router1"},
		Update: []*gnmi.Update{
			{
				Path: &gnmi.Path{Elem: []*gnmi.PathElem{
					{Name: "interfaces"},
					{Name: "interface", Key: map[string]string{"name": interfaceName}},
					{Name: "subinterfaces"},
					{Name: "subinterface", Key: map[string]string{"index": "0"}},
					{Name: "ipv4"},
					{Name: "addresses"},
					{Name: "address", Key: map[string]string{"ip": ipAddress}},
				}},
				Val: &gnmi.TypedValue{Value: &gnmi.TypedValue_StringVal{
					StringVal: fmt.Sprintf(`{ "config": { "ip": "%s", "prefix-length": 24 } }`, ipAddress),
				}},
			},
		},
	}

	return sendConfig(update)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
func UpdateConfig() error {
	log.Println("‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞...")

	addr := "localhost:50051"
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	target := client.Destination{
		Addr:     addr,
		Target:   "router1",
		Encoding: gnmi.Encoding_JSON,
	}

	cli, err := client.New(ctx, client.Type("gnmi"), target)
	if err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer cli.Close()

	// –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Loopback1
	update := &gnmi.SetRequest{
		Prefix: &gnmi.Path{Target: target.Target},
		Update: []*gnmi.Update{
			{
				Path: &gnmi.Path{Elem: []*gnmi.PathElem{{Name: "interfaces"}, {Name: "interface", Key: map[string]string{"name": "Loopback1"}}}},
				Val:  &gnmi.TypedValue{Value: &gnmi.TypedValue_StringVal{StringVal: `{ "config": { "name": "Loopback1", "type": "iana-if-type:softwareLoopback", "enabled": true } }`}},
			},
		},
	}

	resp, err := cli.(*client.Impl).Set(ctx, update)
	if err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
	}

	log.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: %v", resp)
	return nil
}
